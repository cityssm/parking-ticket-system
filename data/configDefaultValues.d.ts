import type { ConfigActiveDirectory, ConfigLocationClass, ConfigParkingTicketStatus } from '../types/configTypes.js';
export declare const configDefaultValues: {
    activeDirectory: ConfigActiveDirectory;
    'application.applicationName': string;
    'application.logoURL': string;
    'application.httpPort': number;
    'application.userDomain': string;
    'application.useTestDatabases': boolean;
    'application.maximumProcesses': number;
    'application.feature_mtoExportImport': boolean;
    'application.task_nhtsa.runTask': boolean;
    'application.task_nhtsa.executeHour': number;
    'reverseProxy.disableCompression': boolean;
    'reverseProxy.disableEtag': boolean;
    'reverseProxy.urlPrefix': string;
    'session.cookieName': string;
    'session.secret': string;
    'session.maxAgeMillis': number;
    'session.doKeepAlive': boolean;
    'users.testing': string[];
    'users.canLogin': string[];
    'users.canUpdate': string[];
    'users.isAdmin': string[];
    'users.isOperator': string[];
    'defaults.country': string;
    'defaults.province': string;
    'parkingTickets.ticketNumber.fieldLabel': string;
    'parkingTickets.ticketNumber.pattern': RegExp;
    'parkingTickets.ticketNumber.isUnique': boolean;
    'parkingTickets.ticketNumber.nextTicketNumberFn': (currentTicketNumber: string) => string;
    'parkingTickets.updateWindowMillis': number;
    'parkingTickets.licencePlateExpiryDate.includeDay': boolean;
    parkingTicketStatuses: ConfigParkingTicketStatus[];
    'parkingOffences.accountNumber.pattern': RegExp;
    locationClasses: ConfigLocationClass[];
    licencePlateCountryAliases: Record<string, string>;
    licencePlateProvinceAliases: {};
    licencePlateProvinces: {};
    'mtoExportImport.authorizedUser': string;
    'databaseCleanup.windowDays': number;
};
